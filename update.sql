ALTER TABLE public.subscriptions_list RENAME COLUMN billing_status TO status;

ALTER TABLE  public.subscriptions_list ADD COLUMN "collecting_phones" BOOLEAN NOT NULL DEFAULT FALSE;

ALTER TABLE public.template_landing_page RENAME COLUMN template_name TO campaign_name;

ALTER TABLE public.template_rewards_page RENAME COLUMN template_name TO campaign_name;

CREATE TABLE public.support (
  id SERIAL PRIMARY KEY,
  shop_id TEXT NOT NULL,
  issue_msg TEXT NOT NULL,
  select_file TEXT
);

ALTER TABLE public.support OWNER TO postgres;
--
-- Data for Name: feedback; Type: TABLE DATA; Schema: public; Owner: postgres
--

CREATE TABLE public.feedback (
  id SERIAL PRIMARY KEY,
  shop_id TEXT NOT NULL,
  rating integer NOT NULL,
  feedback TEXT NOT NULL
);
ALTER TABLE public.feedback OWNER TO postgres;


CREATE TABLE IF NOT EXISTS public.campaign_details
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    campaign_id integer NOT NULL,
    is_draft boolean NOT NULL,
    is_active boolean NOT NULL,
    landing_template_link text COLLATE pg_catalog."default",
    rewards_template_link text COLLATE pg_catalog."default",
    landing_page_link text COLLATE pg_catalog."default",
    rewards_page_link text COLLATE pg_catalog."default",
    discount_code_1 text COLLATE pg_catalog."default",
    discount_code_2 text COLLATE pg_catalog."default",
    discount_code_3 text COLLATE pg_catalog."default",
    discount_code_4 text COLLATE pg_catalog."default",
    CONSTRAINT campaign_details_pkey PRIMARY KEY (id),
    CONSTRAINT "campaignID" FOREIGN KEY (campaign_id)
        REFERENCES public.campaign_settings (campaign_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)
TABLESPACE pg_default;
ALTER TABLE IF EXISTS public.campaign_details
    OWNER to postgres;
--
-- Data for Name: user_clicks ; Type: TABLE DATA; Schema: public; Owner: postgres
--
CREATE TABLE public.user_clicks (
	id bigserial primary key not null,
	campaign_id int not null,
	shop varchar(255) not null,
	created_at DATE default current_date,
	foreign key(campaign_id) references campaign_settings(campaign_id) on delete cascade
);
--